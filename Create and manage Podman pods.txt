$$$$$ Document Created on 01-July-2024 using interactive labs $$$$$

##### Create and manage Podman pods #####

Goal:
After completing this scenario users will be able to create podman pods, create containers within those pods, and forward ports to the services those containers run.

Concepts included in this scenario:
Verify whether podman is installed on the system
Create a pod in podman
Run a container inside of a pod in podman
Forward ports to containers within pods.
Creating kubelet definitions from podman pods for easyier re-deployment
Operationalizing a podman pod through systemd with Quadlet
Example Use case:
An administrator wants to run a service on a podman container host, that has dependent services.


### Validating podman, and an introduction to pods ###
## Validate the environment
For this scenario, the container-tools package group, which contains podman and its depenencies, has already been installed on the system.
The feature we will be working with is specific to Podman version 4 and newer, so first let's check that podman 4.0.x or newer is installed on the system.

# podman --version
podman version 4.9.4-rhel

## Introduction to Podman Pods
A pod within podman is a way of grouping containers that make up services. We can create a pod easily, with the following command.

root@rhel:~# podman pod create --name my-pod
9e052af2fdb48722e2b4c55f4073c0086fe99c9b66b288732f5df179a17f553a

root@rhel:~# podman ps 
CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES

root@rhel:~# podman ps -a
CONTAINER ID  IMAGE                                         COMMAND     CREATED         STATUS      PORTS       NAMES
dcb8c49e5c10  localhost/podman-pause:4.9.4-rhel-1714473991              13 seconds ago  Created                 9e052af2fdb4-infra

## Now we can create a container within that pod simply by tellig podman what pod to create the container in.

# podman run --pod my-pod -d --name my-httpd httpd
0b2438e63cbe56f37d19aca52e6238bb11ccf3f377a0e21de51a43f8eb2f3e19

root@rhel:~# podman images
REPOSITORY                           TAG                    IMAGE ID      CREATED        SIZE
localhost/podman-pause               4.9.4-rhel-1714473991  416f6d16ca2b  2 minutes ago  814 kB
registry.access.redhat.com/ubi9/ubi  latest                 e9beb314b7a2  3 days ago     220 MB
docker.io/library/httpd              latest                 bfe6700e6779  2 months ago   151 MB

root@rhel:~# podman ps -a
CONTAINER ID  IMAGE                                         COMMAND           CREATED         STATUS         PORTS       NAMES
dcb8c49e5c10  localhost/podman-pause:4.9.4-rhel-1714473991                    2 minutes ago   Up 19 seconds              9e052af2fdb4-infra
0b2438e63cbe  docker.io/library/httpd:latest                httpd-foreground  19 seconds ago  Up 19 seconds              my-httpd

## Now, we can see that our container is running with
# podman ps
CONTAINER ID  IMAGE                                         COMMAND           CREATED             STATUS             PORTS       NAMES
dcb8c49e5c10  localhost/podman-pause:4.9.4-rhel-1714473991                    3 minutes ago       Up About a minute              9e052af2fdb4-infra
0b2438e63cbe  docker.io/library/httpd:latest                httpd-foreground  About a minute ago  Up About a minute              my-httpd

But what is that extra container? 2d95aa4fdaee-infra
That is a special container that runs our pod. We can see that the pod is up and running, with two containers, even though we only started a single container inside of it.
root@rhel:~# podman pod ps
POD ID        NAME        STATUS      CREATED        INFRA ID      # OF CONTAINERS
9e052af2fdb4  my-pod      Running     6 minutes ago  dcb8c49e5c10  2

In the next step, we'll work with networking within our pod.

### Pods and pod networking ###


## More on pods ##
Pods are good for more than just organization though. A pod also containerizes the network communication between the containers within it.

If we run the same httpd container from earlier, without putting it inside of a pod, we can then access whatever ports we have exposed on the container, via localhost on our container host.


This tells podman to run the same container image, with a new name, and forward port 8080 on our host, to port 80 on the container.

root@rhel:~# podman run -d -p 8080:80 --rm --name my-bare-httpd httpd
033e25cab5f9766ab64fc62383af01579a6c9f9d94f8fb1d00c4d461857e8bed

## Now if we look at podman ps again, we'll see a new httpd container, notice that it says its listening on 0.0.0.0:8080

root@rhel:~# podman ps
CONTAINER ID  IMAGE                                         COMMAND           CREATED         STATUS         PORTS                 NAMES
dcb8c49e5c10  localhost/podman-pause:4.9.4-rhel-1714473991                    15 minutes ago  Up 12 minutes                        9e052af2fdb4-infra
0b2438e63cbe  docker.io/library/httpd:latest                httpd-foreground  12 minutes ago  Up 12 minutes                        my-httpd
033e25cab5f9  docker.io/library/httpd:latest                httpd-foreground  25 seconds ago  Up 25 seconds  0.0.0.0:8080->80/tcp  my-bare-httpd

And we can even test that out with curl

root@rhel:~# curl http://127.0.0.1:8080
<html><body><h1>It works!</h1></body></html>

Lets try to make a new httpd container, inside of our pod, that forwards in the same way. First let's stop our new httpd container.

root@rhel:~# podman stop my-bare-httpd
my-bare-httpd

Now, we still have an httpd container running, but we can't access it, not just because we havent forwarded any ports to it, but because its inside of a pod. The pod acts almost like a firewall, allowing or disallowing ports to the containers within it. Containers that run container images that are configured to listen on a given port are accessible to each other within the pod, but outside the pod are not accessible unless we tell the pod to allow it.

Pod networking
Let's run a container that lets us get to a bash shell within our pod from earlier, to show that the httpd service is in fact accessible, just not from outside the pod.

# podman run -it --pod my-pod --rm registry.access.redhat.com/ubi9/ubi

In this example, we're running a container, interactively, insdie of our pod. You should get to a bash prompt inside of a RHEL UBI container.

This container doesn't run any services, but if we try to use curl on localhost, we'll see that in fact we get a response!

[root@my-pod /]# curl http://127.0.0.1
<html><body><h1>It works!</h1></body></html>

You can exit that shell with
[root@my-pod /]# exit

So let's re-create our pod, and make it listen on port 8080. Let's stop, and then delete our pod.

# podman pod stop my-pod && podman pod rm my-pod

root@rhel:~# podman pod stop my-pod && podman pod rm my-pod
9e052af2fdb48722e2b4c55f4073c0086fe99c9b66b288732f5df179a17f553a
9e052af2fdb48722e2b4c55f4073c0086fe99c9b66b288732f5df179a17f553a

Now let's make a new pod, with a new httpd container, and have the pod forward port 8080 to port 80 inside the pod.

# podman pod create --name my-networked-pod -p 8080:80
a293325ee2b6e98f18bbcf01b3c8680d7b78366880d020aaf8f2828b1ace03c7

And then we'll need a container to listen on port 80, but we don't need to tell the container to forward anything, that's handled at the pod level.

# podman run -d --pod my-networked-pod --name my-networked-httpd httpd
f42f7724a8838f660c1d33e81534d062595c8aaa965c47c5762b0269c0a1dbdc

Now, if we check podman pod ps and podman ps we'll see that both the pod container, and the container itself show the port 8080 forward, even though we didnt specify that on the container.

root@rhel:~# podman pod ps
POD ID        NAME              STATUS      CREATED             INFRA ID      # OF CONTAINERS
a293325ee2b6  my-networked-pod  Running     About a minute ago  db4fe43924d7  2

root@rhel:~# podman ps
CONTAINER ID  IMAGE                                         COMMAND           CREATED             STATUS         PORTS                 NAMES
db4fe43924d7  localhost/podman-pause:4.9.4-rhel-1714473991                    About a minute ago  Up 47 seconds  0.0.0.0:8080->80/tcp  a293325ee2b6-infra
f42f7724a883  docker.io/library/httpd:latest                httpd-foreground  47 seconds ago      Up 47 seconds  0.0.0.0:8080->80/tcp  my-networked-httpd

And we should be able to test that with curl now.

curl http://127.0.0.1:8080

root@rhel:~# curl http://127.0.0.1:8080
<html><body><h1>It works!</h1></body></html>

In our next step, we'll look at how to operationalize pod deployements using kubelets!


## Operationalizing Pods with kube
Podman generate, and podman play
Another great feature of pods is that you can generate a yaml definition of your pod, and use it to re-create your pod using podman generate and podman play.

Let's generate a definition for your newly networked pod.

podman generate kube my-networked-pod > my-networked-pod.yaml

root@rhel:~# podman pod ps
POD ID        NAME              STATUS      CREATED        INFRA ID      # OF CONTAINERS
a293325ee2b6  my-networked-pod  Running     5 minutes ago  db4fe43924d7  2

root@rhel:~# podman generate kube my-networked-pod > my-networked-pod.yaml

root@rhel:~# ls
google-cloud.repo  my-networked-pod.yaml  post-run.log  post-run.log.done  rh-cloud.repo

Now, we can see what we generated

root@rhel:~# cat my-networked-pod.yaml
# Save the output of this file and use kubectl create -f to import it into Kubernetes.
#
# Created with podman-4.9.4-rhel
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2024-07-01T10:16:21Z"
  labels:
    app: my-networked-pod
  name: my-networked-pod
spec:
  containers:
  - image: docker.io/library/httpd:latest
    name: my-networked-httpd
    ports:
    - containerPort: 80
      hostPort: 8080

###### same as above #####
root@rhel:~# cat my-networked-pod.yaml
# Save the output of this file and use kubectl create -f to import
# it into Kubernetes.
#
# Created with podman-4.4.1
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2023-09-26T19:58:57Z"
  labels:
    app: my-networked-pod
  name: my-networked-pod
spec:
  containers:
  - image: docker.io/library/httpd:latest
    name: my-networked-httpd
    ports:
    - containerPort: 80
      hostPort: 8080
    resources: {}
  hostname: my-networked-pod
  restartPolicy: Never
status: {}

###### end of output #####

Now, if we stop, and remove our pod.

# podman pod stop my-networked-pod && podman pod rm my-networked-pod

root@rhel:~# podman pod stop my-networked-pod && podman pod rm my-networked-pod
a293325ee2b6e98f18bbcf01b3c8680d7b78366880d020aaf8f2828b1ace03c7
a293325ee2b6e98f18bbcf01b3c8680d7b78366880d020aaf8f2828b1ace03c7

We can re-create it easily with podman play.

# podman play kube my-networked-pod.yaml

## podman-kube-generate -> Generate Kubernetes YAML  based  on containers, pods or volumes
root@rhel:~# podman generate kube my-networked-pod > my-networked-pod.yaml
root@rhel:~# ls
my-networked-pod.yaml

#podman-kube-play -> Create containers, pods and volumes based on Kubernetes YAML
# podman play kube my-networked-pod.yaml




NOTE: This feature of podman works on other items as well, you can, for instance, define a volume and use podman generate to store the volume definition as a yaml file. Then re-create it on another system using podman play.

root@rhel:~# podman play kube my-networked-pod.yaml 
Pod:
892ef27d1cfcdafcfd4b8472c8d1567eb3d77f3af89c1925dc360a57b4602bba
Container:
3bca25f0bfd6881460c2320e5c1fc32d5e8604afde59cc62d7c8411219edc0a2

Now, if we check on podman pod ps and podman ps we will see a new pod, and container within it.

root@rhel:~# podman pod ps
POD ID        NAME              STATUS      CREATED         INFRA ID      # OF CONTAINERS
892ef27d1cfc  my-networked-pod  Running     33 seconds ago  f79d5ef5d892  2

root@rhel:~# podman ps
CONTAINER ID  IMAGE                                         COMMAND           CREATED         STATUS         PORTS                 NAMES
f79d5ef5d892  localhost/podman-pause:4.9.4-rhel-1714473991                    34 seconds ago  Up 32 seconds  0.0.0.0:8080->80/tcp  892ef27d1cfc-infra
3bca25f0bfd6  docker.io/library/httpd:latest                httpd-foreground  32 seconds ago  Up 32 seconds  0.0.0.0:8080->80/tcp  my-networked-pod-my-networked-httpd

Now, if you try your curl command from earlier, you should get your test site just as before. You can see how this is a great way to save the deployment information and re-deploy quickly.

curl http://127.0.0.1:8080

root@rhel:~# curl http://127.0.0.1:8080
<html><body><h1>It works!</h1></body></html>

In the next step, we're going a little deeper into operationalizing your pod, with Quadlet.

#### Managing Pods with Systemd and Quadlet ####

## Quadlet
Quadlet is a systemd generator, that will take your pod definition, and register it as a service in systemd. We have provided a quadlet pod defintion for you.

cat my-networked-pod.kube

=========================================================================================
root@rhel:~# cat my-networked-pod.kube
[Install]
WantedBy=default.target

[Unit]
# You can use standard unit options to control the start-up order of your pod.
# Such as:
#After=
#Requires=

[Kube]
# In this section you can define several things
# here we are simply calling the kube yaml we generated with podman
Yaml=/etc/containers/systemd/my-networked-pod.yaml

#We also need to define the ports that our pod maps int, just as we do a the pod level
PublishPort=8080:80
=========================================================================================

You can see the similarities in the above output, and a standard systemd unit file. You can add in start up options, ordering, and other systemd configuration to tune when and how this pod starts up.

As you can see, the path to the pod yaml is /etc/containers/systemd/my-networked-pod.yaml. You can place your yaml definition elsewhere if you would like, but this is also where the .kube quadlet defintion needs to be placed. Keeping them toghether makes it clean for this lab.

Let's copy the files into place.

cp ~/my-networked-pod.yaml /etc/containers/systemd

And then

cp ~/my-networked-pod.kube /etc/containers/systemd

Now, if we reload systemd, quadlet will generate a service unit for our pod. You can also test the generation using quadlet in a dry-run.

/usr/libexec/podman/quadlet -dryrun

=========================================================================================

root@rhel:~# /usr/libexec/podman/quadlet -dryrun
quadlet-generator[4025]: Loading source unit file /etc/containers/systemd/my-networked-pod.kube
---my-networked-pod.service---
[Install]
WantedBy=default.target

[Unit]
SourcePath=/etc/containers/systemd/my-networked-pod.kube
RequiresMountsFor=%t/containers

# You can use standard unit options to control the start-up order of your pod.
# Such as:
#After=
#Requires=

[X-Kube]
# In this section you can define several things
# here we are simply calling the kube yaml we generated with podman
Yaml=/etc/containers/systemd/my-networked-pod.yaml

#We also need to define the ports that our pod maps int, just as we do a the pod level
PublishPort=8080:90

[Service]
KillMode=mixed
Environment=PODMAN_SYSTEMD_UNIT=%n
Type=notify
NotifyAccess=all
SyslogIdentifier=%N
ExecStart=/usr/bin/podman kube play --replace --service-container=true --publish 8080:90 /etc/containers/systemd/my-networked-pod.yaml
ExecStopPost=/usr/bin/podman kube down /etc/containers/systemd/my-networked-pod.yaml

=========================================================================================

Using this dry run, you can see what qadlet will do when you reload systemd.

Notice the ExecStart command in the service. You can see the --replace flag, which means each time you start this service, it will re-read the kube definition, and replace your pod. This means that changes to the pod's definition and updates to the container images that the definition calls, will be pulled in automatically every time the pod is started using systemd.

This looks fine, so let's get this definiteion in place.

# systemctl daemon-reload

Now we can start the service up, but first, let's check podman, and make sure we dont already have our pod running.

# podman pod ps

Looks good, Let's start our pod up.

# systemctl start my-networked-pod.service

This should go and download any container images that are neccessary, and then start up our pod.

# systemctl status my-networked-pod.service

# podman pod ps
# podman ps

Now the my-networked-pod pod can be controlled via systemctl, and will even start up on system boot-up.

################### End of interactive Session ###################